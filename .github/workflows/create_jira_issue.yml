name: Create Jira issue

on:
  issues:
    types:
      - opened

permissions:
  contents: write
  issues: write

jobs:
  create-issue:
    name: Create Jira issue
    runs-on: ubuntu-latest
    
    steps:
      # 0. Debug payload
      - name: Debug issue payload
        run: echo '${{ toJSON(github.event.issue) }}'

      # 1. Jira 로그인
      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      # 2. 메인 코드 체크아웃
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      # 3. GitHub Issue 내용 파싱
      - name: Issue Parser
        id: issue-parser
        uses: stefanbuck/github-issue-parser@v3
        with:
          template-path: .github/ISSUE_TEMPLATE/issue-form.yml

      - name: Log Issue Parser
        run: |
          echo "=== All Issue Parser Outputs ==="
          echo "branchtype: ${{ steps.issue-parser.outputs.issueparser_branchtype }}"
          echo "branchname: ${{ steps.issue-parser.outputs.issueparser_branchname }}"
          echo "description: ${{ steps.issue-parser.outputs.issueparser_description }}"
          echo "=== JSON Output ==="
          echo '${{ steps.issue-parser.outputs.jsonString }}'

      # 4. Markdown to Jira Syntax 변환
      - name: Convert markdown to Jira Syntax
        id: md2jira
        uses: peter-evans/jira2md@v1
        with:
          input-text: |
            ### Github Issue Link
            - ${{ github.event.issue.html_url }}
            
            ${{ github.event.issue.body }}
          mode: md2jira

      # 5. Jira 이슈 생성
      - name: Create Jira Issue
        id: create
        uses: atlassian/gajira-create@v3
        with:
          project: DJ
          issuetype: Task
          summary: "${{ github.event.issue.title }}"
          description: "${{ steps.md2jira.outputs.output-text }}"

      - name: Log created issue
        run: echo "Jira Issue Created - ${{ steps.create.outputs.issue }}"

      # 6. develop 브랜치 최신 상태로 체크아웃
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0

      # 7. 브랜치 생성
      - name: Create branch with Ticket number
        run: |
          ISSUE_NUMBER="${{ steps.create.outputs.issue }}"
          
          # Issue body를 파일로 저장
          cat << 'EOF' > issue_body.txt
          ${{ github.event.issue.body }}
          EOF
          
          echo "=== Issue Body Content ==="
          cat issue_body.txt
          echo "=== End of Issue Body ==="
          
          # Parser 출력값 먼저 시도
          BRANCH_TYPE="${{ steps.issue-parser.outputs.issueparser_branchtype }}"
          BRANCH_NAME_INPUT="${{ steps.issue-parser.outputs.issueparser_branchname }}"
          
          # Parser가 비어있으면 파일에서 직접 파싱
          if [ -z "$BRANCH_TYPE" ] || [ "$BRANCH_TYPE" = "_No response_" ]; then
            echo "Parser branchtype empty - parsing from file"
            BRANCH_TYPE=$(grep -A 1 "브랜치 타입 선택" issue_body.txt | tail -n 1 | tr -d '\r' | xargs)
            echo "Extracted BRANCH_TYPE: '$BRANCH_TYPE'"
          fi
          
          if [ -z "$BRANCH_NAME_INPUT" ] || [ "$BRANCH_NAME_INPUT" = "_No response_" ]; then
            echo "Parser branchname empty - parsing from file"
            BRANCH_NAME_INPUT=$(grep -A 1 "작업 요약" issue_body.txt | tail -n 1 | tr -d '\r' | xargs)
            echo "Extracted BRANCH_NAME_INPUT: '$BRANCH_NAME_INPUT'"
          fi
          
          echo "=== Parsed Values ==="
          echo "ISSUE_NUMBER: ${ISSUE_NUMBER}"
          echo "BRANCH_TYPE: '${BRANCH_TYPE}'"
          echo "BRANCH_NAME_INPUT: '${BRANCH_NAME_INPUT}'"
          
          # 기본값 처리
          if [ -z "$BRANCH_TYPE" ] || [ "$BRANCH_TYPE" = "_No response_" ]; then
            BRANCH_TYPE="feature"
            echo "WARNING: BRANCH_TYPE empty, using default: feature"
          fi
          
          if [ -z "$BRANCH_NAME_INPUT" ] || [ "$BRANCH_NAME_INPUT" = "_No response_" ]; then
            BRANCH_NAME_INPUT="issue"
            echo "WARNING: BRANCH_NAME_INPUT empty, using default: issue"
          fi
          
          # 브랜치명 정리 (한글 제거, 영문/숫자/하이픈/언더스코어만 허용)
          SANITIZED_NAME=$(echo "$BRANCH_NAME_INPUT" | \
            iconv -f utf-8 -t ascii//TRANSLIT 2>/dev/null | \
            sed 's/[^a-zA-Z0-9 _-]//g' | \
            sed 's/  */ /g' | \
            sed 's/ /-/g' | \
            sed 's/^-\+//; s/-\+$//' | \
            tr '[:upper:]' '[:lower:]' | \
            sed 's/-\+/-/g')
          
          # iconv 실패 시 대체 방법
          if [ -z "$SANITIZED_NAME" ]; then
            echo "iconv failed, using alternative method"
            SANITIZED_NAME=$(echo "$BRANCH_NAME_INPUT" | \
              sed 's/[^a-zA-Z0-9 _-]//g' | \
              sed 's/  */ /g' | \
              sed 's/ /-/g' | \
              sed 's/^-\+//; s/-\+$//' | \
              tr '[:upper:]' '[:lower:]' | \
              sed 's/-\+/-/g')
          fi
          
          if [ -z "$SANITIZED_NAME" ]; then
            SANITIZED_NAME="issue"
            echo "WARNING: SANITIZED_NAME empty after cleaning"
          fi
          
          BRANCH_NAME="${BRANCH_TYPE}/${ISSUE_NUMBER}-${SANITIZED_NAME}"
          echo "Creating branch: ${BRANCH_NAME}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "${BRANCH_NAME}"
          git push origin "refs/heads/${BRANCH_NAME}"
          
          # 정리
          rm -f issue_body.txt

      # 8. GitHub Issue 제목 업데이트
      - name: Update GitHub Issue title
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'update-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "[${{ steps.create.outputs.issue }}] ${{ github.event.issue.title }}"

      # 9. Jira 링크 코멘트 추가
      - name: Add comment with Jira issue link
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            Jira Issue Created: [${{ steps.create.outputs.issue }}](${{ secrets.JIRA_BASE_URL }}/browse/${{ steps.create.outputs.issue }})
